name: Package and Push Helm Chart to ACR


on:
  workflow_call:
    inputs:
      release:
        description: 'Skip workflow if set to true for releases'
        required: false
        type: boolean
      repository:
        required: true
        type: string
      chart_path:  
        description: 'Path to the Helm chart'
        required: false
        type: string
        default: 'chart/'    
    secrets:
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true

jobs:
  package-and-push:
    if: ${{ github.ref == 'refs/heads/main' || (startsWith(github.ref, 'refs/heads/feature/') && github.event.inputs.feature == 'true') || startsWith(github.ref, 'refs/heads/hotfix/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download version file
        uses: actions/download-artifact@v4.1.4
        with:
          name: version
          path: /tmp
          
      - name: Set chartVersion and appVersion
        run: |
          GITVERSION=$(cat /tmp/version.txt)
          echo "appVersion=$GITVERSION" >> $GITHUB_ENV
          
          # Check if the GitHub Action was triggered by a tag or the main branch
          if [[ "${{ github.ref }}" == refs/tags/* ]] || [[ "${{ github.ref }}" == refs/heads/main ]]; then
            # Use GitVersion as chartVersion for tags and main branch
            echo "chartVersion=$GITVERSION" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" =~ refs/heads/feature/* ]]; then
            # Use a default version for feature branches
            echo "chartVersion=0.0.1" >> $GITHUB_ENV
          else
            # Fallback to a default version (just in case)
            echo "chartVersion=0.0.1" >> $GITHUB_ENV
          fi
        env:
          GITHUB_REF: ${{ github.ref }}


          
      - name: Helm tool installer
        uses: Azure/setup-helm@v4
        with:
          version: latest

      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.ACR_PASSWORD }}" | helm registry login ${{ inputs.repository }} --username ${{ secrets.ACR_USERNAME }} --password-stdin
        
      - name: Package Helm chart
        run: |
          helm dependency update
          helm package ${{ inputs.chart_path }} -d .deploy --version ${{ env.chartVersion }} --app-version ${{ env.appVersion }}


#      - name: Package Helm chart
#        run: |
#          helm package ${{ inputs.chart_path }} -d .deploy --version ${{ env.chartVersion }} --app-version ${{ env.appVersion }}
#          # Find the packaged chart and set its name as an environment variable
#          CHART_NAME=$(ls .deploy/*.tgz)
#          echo "CHART_NAME=$(basename $CHART_NAME)" >> $GITHUB_ENV
          
      - name: Set CHART_NAME and CHART_VERSION
        run: |
          CHART_PATH=$(ls .deploy/*.tgz)
          CHART_NAME=$(basename $CHART_PATH .tgz | sed -E 's/-[0-9]+\.[0-9]+\.[0-9]+$//')
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV
          CHART_VERSION=$(basename $CHART_PATH .tgz | grep -oE '[0-9]+\.[0-9]+\.[0-9]+$')
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV

      - name: Package Helm chart
        run: |
          helm package ${{ inputs.chart_path }} -d .deploy --version ${{ env.CHART_VERSION }} --app-version ${{ env.CHART_VERSION }}

      - name: Push Helm chart to ACR
        run: |
          echo "Using chart version: ${{ env.CHART_VERSION }}"
          helm push .deploy/${{ env.CHART_NAME }}-${{ env.CHART_VERSION }}.tgz oci://${{ inputs.repository }}/helm
