name: GitVersion

on:
  workflow_call:
    outputs:
      version:
        description: "The calculated version"
        value: ${{ jobs.gitversion.outputs.version }}

jobs:

  gitversion:
    name: 'Determine Version'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_tag.outputs.tag }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
          preferLatestVersion: true
          
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: 'GitVersion.yml'


      - name: Set Version
        id: set_tag
        run: |
          # Read the version from GitVersion output
          FULL_SEM_VER="${{ steps.gitversion.outputs.fullSemVer }}"
          MAJOR_MINOR_PATCH="${{ steps.gitversion.outputs.majorMinorPatch }}"
          
          # Get the branch name, assuming GitHub Actions syntax. Adjust for your CI/CD system.
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          
          # Check if the branch is a feature branch
          if [[ "$BRANCH_NAME" == feature/* ]]; then
              # For feature branches, use the fullSemVer
              TAG="$FULL_SEM_VER"
          else
              # For non-feature branches, use majorMinorPatch
              TAG="$MAJOR_MINOR_PATCH"
          fi
          
          echo "Tag: $TAG"
          echo "TAG=${TAG}" >> $GITHUB_ENV

        
#      - name: Save version to file
#        run: echo "${{ steps.set_tag.outputs.tag }}" > /tmp/version.txt
        
      - name: Save version to file
        run: echo "$TAG" > /tmp/version.txt
        
      - name: Upload version artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: version
          path: /tmp/version.txt

      
      - name: Create Tag (if RELEASE is true and branch is main)
        if: github.ref == 'refs/heads/main' && github.event.inputs.release == 'true'
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          VERSION="$TAG"
          if [ -z "$VERSION" ]; then
            echo "VERSION is empty, skipping tag creation."
          else
            echo "Creating and pushing tag $VERSION"
            git tag -a $VERSION -m "Release version $VERSION"
            git push origin $VERSION
          fi
        env:
          TAG: ${{ env.TAG }}
