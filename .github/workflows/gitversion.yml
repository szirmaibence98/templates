name: GitVersion

on:
  workflow_call:
    outputs:
      version:
        description: "The calculated version"
        value: ${{ jobs.gitversion.outputs.version }}

jobs:
  gitversion:
    name: 'Determine Version'
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.set_tag.outputs.tag }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
          preferLatestVersion: true
          
      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: 'GitVersion.yml'

      - name: Set Docker tag with Branch Name
        id: set_tag
        run: |
          # Read the version from GitVersion output
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          # Determine the current branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            # For main branch, use semver as is
            TAG="$VERSION"
          else
            # For other branches, replace + with - in version and append branch name
            CLEAN_VERSION=${VERSION//+/-}
            SANITIZED_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
            TAG="${CLEAN_VERSION}-${SANITIZED_BRANCH_NAME}"
          fi
          
          echo "Tag: $TAG"
          echo "::set-output name=tag::${TAG}"
        
      - name: Save version to file
        run: echo "${{ steps.set_tag.outputs.tag }}" > /tmp/version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          name: version
          path: /tmp/version.txt
      
      - name: Create Tag (if RELEASE is true and branch is main)
        if: github.ref == 'refs/heads/main' && github.event.inputs.release == 'true'
        run: |
          VERSION="${{ steps.set_tag.outputs.tag }}"
          git tag $VERSION
          git push origin $VERSION

